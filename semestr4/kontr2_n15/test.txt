int CIntN::OMPTest(const char *fn)
{
 cout << "Starting Parallel Test."<<endl;
 float  var; clock_t t1,t2,t3,t4;
 vector<CIntN0> v; vector<unsigned short int> p;
 ifstream f(fn); string str;
 while(getline(f,str))
 {
 //cout<<str<<endl;
  stringstream ss(str); istream_iterator<string> it(ss);
  //it=ss;
  if(it!=istream_iterator<string>())
  {
   
    CIntN0 w(p);
    size_t i; 
 
    
    ++it;
    for(i=0;it!=istream_iterator<string>();++it,i++) 
     {
      (w).setPos(i,atof(it->c_str()));  

     }
    v.push_back(w);
   
  }
 }
 
 t1=clock();
    for(size_t j=0;/*(ss>>k)&&*/(j<v.size());j++)
    {
      //v[j]=v[j]*v[j];
      var= v[j] * v[j];
      var=var;
      for(size_t count=0;count<20;count++)
      {
      v[j] = v[j] + v[j];
      v[j] = v[j] - v[j];
      var= v[j] * v[j];
      }
    }
 t2=clock();
    //float Time=(t2-t1);
    //Time=(float)(t2-t1);
 
 cout << "NON-PARALLEL FOR: TIME = "<<t2-t1<<" nanosec"<<endl;
 t3=clock();
#pragma omp parallel for private (var) //shared(w)
    for(size_t j=0;(j<v.size());j++)
    {
      var= v[j] * v[j];
      var=var;
      for(size_t count=0;count<20;count++)
      {
      v[j] = v[j] + v[j];
      v[j] = v[j] - v[j];
      var= v[j] * v[j];
      }
    }
 t4=clock();//localtime(&t2);
    //float Time=(t4-t3);
 
 cout << "PARALLEL FOR: TIME = "<<t4-t3<<" nanosec"<<endl;
return 0;
}
